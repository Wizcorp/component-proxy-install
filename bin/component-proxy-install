#!/usr/bin/env node
var app = require('../');
var spawn = require('child_process').spawn;
var path = require('path');

// Get the path of the `component` module
var componentPath = path.resolve(require.resolve('component'), '../');

// We only support Component v0.18.0. Let's make sure we are about to use the right one
var componentPackageInfo = require(path.resolve(componentPath, 'package.json'));
if (componentPackageInfo.version !== '0.18.0') {
	console.error('We only support the version 0.18.0 of Component. Yours is currently ' + componentPackageInfo.version);
	process.exit(1);
}

// Component binary
var componentBinaryPath = path.resolve(componentPath, 'bin/component');

// Run the server
console.log('Starting component proxy');
app.start();

var port = app.getPort();
var remotes = ['https://raw.githubusercontent.com' , 'http://127.0.0.1:' + port];

var passedArguments = process.argv.slice(2);

// Look for remote options in the passed arguments
for (var i = 0; i < passedArguments.length; i = i + 1) {
	if (passedArguments[i] === '-r' || passedArguments[i] === '--remotes') {
		remotes.push(passedArguments[i + 1]);
		passedArguments.splice(i, 2);
		i = i - 1;
	}
}

var installArgs = [ 'install', '-r', remotes.join(',')];
installArgs = installArgs.concat(passedArguments);

// Run the install process
var installProc = spawn(componentBinaryPath, installArgs);

installProc.stdout.on('data', function(data) {
  process.stdout.write('' + data);
});

installProc.stderr.on('data', function(data) {
  process.stderr.write('' + data);
});

installProc.on('close', function(code) {
  console.log('Stopping component proxy');
  app.stop(function () {
    process.exit(code);
  });
});
